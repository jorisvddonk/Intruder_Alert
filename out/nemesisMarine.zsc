class NemesisMarine : MovableIAActor {
  PIDController posXPID;
  PIDController posYPID;
  Spaceship target;

  void setTarget(Spaceship tgt) {
    self.target = tgt;
  }

  States {
    Spawn:
      Goto S0;
    S0:
      NMTA U -1;
      stop;
    S1:
      NMTA U -1;
      stop;
    S2:
      NMTA U -1;
      stop;
    S3:
      NMTA U -1;
      stop;
    S4:
      NMTA U -1;
      stop;
    S5:
      NMTA U -1;
      stop;
    S6:
      NMTA U -1;
      stop;
    S7:
      NMTA U -1;
      stop;
    S8:
      NMTA U -1;
      stop;
    S9:
      NMTA U -1;
      stop;
    S10:
      NMTA U -1;
      stop;
    S11:
      NMTA U -1;
      stop;
    S12:
      NMTA U -1;
      stop;
    S13:
      NMTA U -1;
      stop;
    S14:
      NMTA U -1;
      stop;
    S15:
      NMTA U -1;
      stop;
  }

  override void PostBeginPlay()
  {
    Super.PostBeginPlay();
    posXPID = new("PIDController").init();
    posYPID = new("PIDController").init();
    posXPID.setkP(-1.0);
    posYPID.setkP(-1.0);
    posXPID.setkI(-3.0);
    posYPID.setkI(-3.0);
    posXPID.setkD(-40);
    posYPID.setkD(-40);
  }

  override void Tick() {
    self.posXPID.update(self.uPosition.x, self.target.uPosition.x);
    self.posYPID.update(self.uPosition.y, self.target.uPosition.y);
    float x_thrust = self.posXPID.step();
    float y_thrust = self.posYPID.step();

    Vector2 targetVector = (Max(-1.5, Min(1.5, -x_thrust * 0.1)), Max(-1.5, Min(1.5, -y_thrust * 0.1)));

    mov = (mov.x + targetVector.x, mov.y + targetVector.y);

    Super.Tick();

    float dx = (self.uPosition.x - self.target.uPosition.x);
    float dy = (self.uPosition.y - self.target.uPosition.y);
    if (((dx * dx) + (dy * dy)) < 10) {
      A_PLAYSOUND("nem/int", CHAN_AUTO, 1, false, ATTN_NONE, false);
      self.Destroy();
    }
  }

}