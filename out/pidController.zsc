class PIDController: Thinker {
  float kP;
  float kI;
  float kD;
  float minIntegral;
  float minCapIntegral;
  float error;
  float previousError;
  float integralError;
  float derivativeError;
  float maxCapIntegral;
  float maxIntegral;

  PIDController init() {
    self.kP = -0.45;
    self.kI = 0.0;
    self.kD = -80;
    self.minIntegral = -10;
    self.maxIntegral = 10;
    self.minCapIntegral = -10;
    self.maxCapIntegral = 10;
    self.error = 0;
    self.previousError = 0;
    return self;
  }

  void update(float current, float target) {
    self.error = target - current;
  }

  void reset() {
    self.integralError = 0;
  }

  float step() {
    self.derivativeError = self.error - self.previousError;
    self.integralError = self.integralError + self.error;

    if (
      self.integralError < self.minCapIntegral
    ) {
      self.integralError = self.minCapIntegral;
    }
    if (
      self.integralError > self.maxCapIntegral
    ) {
      self.integralError = self.maxCapIntegral;
    }

    float mP = self.error * self.kP;
    float mI = self.integralError * self.kI;
    float mD = self.derivativeError * self.kD;

    if (
       mI < self.minIntegral
    ) {
      mI = self.minIntegral;
    }
    if (
      mI > self.maxIntegral
    ) {
      mI = self.maxIntegral;
    }

    self.previousError = self.error;
    return mP + mI + mD;
  }

  void setkP(float n) {
    self.kP = n;
  }
  void setkI(float n) {
    self.kI = n;
  }
  void setkD(float n) {
    self.kD = n;
  }
}