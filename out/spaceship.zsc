class Spaceship : IAActor {
  Vector3 initialPosition;
  Vector2 mov;

  int roting;
  bool thrusting;

  int lastRot;
  int lastThrust;
  Default {
    +NOGRAVITY;
    +WALLSPRITE;
    +DONTINTERPOLATE;
  }

  override void PostBeginPlay()
  {
    mov = (0,0);
    angle = 0;
    roting = 0;
    lastRot = 0;
    lastThrust = 0;
    thrusting = false;
    initialPosition = (self.Pos.x, self.Pos.y, self.Pos.z);
  }

  void setuPosition(Vector2 position) {
    self.uPosition = position;
  }

  void turn(int a) {
    roting = a;
  }

  void thrust(bool a) {
    thrusting = a;
  }

  void maybeRotate() {
    lastRot = lastRot - 1;
    if (lastRot <= 0) {
      if (roting != 0) {
        angle = angle + roting;
        lastRot = 10;
      }
    }
  }

  void maybeThrust() {
    lastThrust = lastThrust - 1;
    if (lastThrust <= 0) {
      if (thrusting) {
        mov = (mov.x + (sin(angle * (360 / 16))), mov.y + (cos(angle * (360 / 16))));
      }
    }
  }

  void updateUniversePosition() {
    self.uPosition.x = self.uPosition.x + (mov.x * 0.02);
    self.uPosition.y = self.uPosition.y + (mov.y * 0.02);
  }

  virtual Vector3 getDoomWorldPosition() {
    return self.initialPosition;
  }

  override void Tick() {
    maybeRotate();
    maybeThrust();
    Super.Tick();
    updateUniversePosition();
    SetXYZ(getDoomWorldPosition());
  }
}
